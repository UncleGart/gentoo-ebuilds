From bee6beaee787c99096b0c05117a89ba753813775 Mon Sep 17 00:00:00 2001
From: Artem Grishin <pm@gart.xyz>
Date: Tue, 19 Nov 2024 20:12:30 -0500
Subject: [PATCH] time_t

---
 src/base/dsa2.c        | 8 ++++----
 src/util/string_util.c | 8 ++++----
 src/util/string_util.h | 2 +-
 src/util/timestamp.c   | 2 +-
 src/util/timestamp.h   | 2 +-
 5 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/base/dsa2.c b/src/base/dsa2.c
index 4425e1e..4a2f40c 100644
--- a/src/base/dsa2.c
+++ b/src/base/dsa2.c
@@ -767,7 +767,7 @@ dsa2_adjust_for_rcnt_successes(Results_Table * rtable) {
    char  b[900]; b[0] = '\0';
    if ( IS_DBGTRC(debug, DDCA_TRC_NONE) ) {
       for (int ndx = 0; ndx < actual_lookback; ndx++) {
-         g_snprintf(b + strlen(b), 900-strlen(b), "%s{tryct:%d,reqd step:%d,%ld}",
+         g_snprintf(b + strlen(b), 900-strlen(b), "%s{tryct:%d,reqd step:%d,%lld}",
              (ndx > 0) ? ", " : "",
              latest_values[ndx].tryct, latest_values[ndx].required_step,
              latest_values[ndx].epoch_seconds);
@@ -779,7 +779,7 @@ dsa2_adjust_for_rcnt_successes(Results_Table * rtable) {
    if ( IS_DBGTRC(debug, DDCA_TRC_NONE) ) {
       GPtrArray * svals = g_ptr_array_new_with_free_func(g_free);
       for (int ndx = 0; ndx < actual_lookback; ndx++) {
-         char * s = g_strdup_printf("{tryct:%d,reqd step:%d,%ld}",
+         char * s = g_strdup_printf("{tryct:%d,reqd step:%d,%lld}",
              latest_values[ndx].tryct, latest_values[ndx].required_step,
              latest_values[ndx].epoch_seconds);
          g_ptr_array_add(svals, s);
@@ -1190,12 +1190,12 @@ dsa2_save_persistent_stats() {
 #endif
          for (int k = 0; k < rtable->recent_values->ct; k++) {
             Successful_Invocation si = cirb_get_logical(rtable->recent_values, k);
-            fprintf(stats_file, " {%d,%d,%ld}", si.tryct, si.required_step, si.epoch_seconds);
+            fprintf(stats_file, " {%d,%d,%lld}", si.tryct, si.required_step, si.epoch_seconds);
          }
 #ifdef OUT
          // wrong - should write it to the circular buffer
          if (next_step >= 0)  {
-            fprintf(stats_file, " {%d,%d,%ld}",
+            fprintf(stats_file, " {%d,%d,%lld}",
                 999, rtable->cur_step, cur_realtime_nanosec()/(1000*1000*1000));
          }
 #endif
diff --git a/src/util/string_util.c b/src/util/string_util.c
index e4bd0bf..1ac5b62 100644
--- a/src/util/string_util.c
+++ b/src/util/string_util.c
@@ -1003,7 +1003,7 @@ bool sbuf_append(char * buf, int bufsz, char * sepstr, char * nextval)
  * @remark
  * This function wraps system function strtol(), hiding the ugly details.
  */
-bool str_to_long(const char * sval, long * p_ival, int base)
+bool str_to_long(const char * sval, long long * p_ival, int base)
 {
    assert (base == 0 || base == 10 || base == 16);
    bool debug = false;
@@ -1029,7 +1029,7 @@ bool str_to_long(const char * sval, long * p_ival, int base)
             printf("(%s) work = %s\n", __func__, work);
 
          if (has_digits) {
-            long result = strtol(work, &endptr, base); // allow hex
+            long long result = strtol(work, &endptr, base); // allow hex
             // printf("(%s) sval=%p, endptr=%p, *endptr=|%c| (0x%02x), result=%ld\n",
             //        __func__, sval, endptr, *endptr, *endptr, result);
             if (*endptr == '\0') {
@@ -1043,7 +1043,7 @@ bool str_to_long(const char * sval, long * p_ival, int base)
 
    if (debug) {
       if (ok)
-        printf("(%s) sval=%s, Returning: %s, *ival = %ld\n", __func__, sval, sbool(ok), *p_ival);
+        printf("(%s) sval=%s, Returning: %s, *ival = %lld\n", __func__, sval, sbool(ok), *p_ival);
       else
         printf("(%s) sval=%s, Returning: %s\n", __func__, sval, sbool(ok));
    }
@@ -1066,7 +1066,7 @@ bool str_to_long(const char * sval, long * p_ival, int base)
  */
 bool str_to_int(const char * sval, int * p_ival, int base)
 {
-   long lval;
+   long long lval;
    bool result = str_to_long(sval, &lval, base);
    if (result) {
       *p_ival = lval;
diff --git a/src/util/string_util.h b/src/util/string_util.h
index ad80889..64fb02c 100644
--- a/src/util/string_util.h
+++ b/src/util/string_util.h
@@ -93,7 +93,7 @@ Null_Terminated_String_Array g_ptr_array_to_ntsa(GPtrArray * garray, bool duplic
 // Numeric conversion
 //
 
-bool str_to_long( const char * sval, long *  p_ival, int base);
+bool str_to_long( const char * sval, long long *  p_ival, int base);
 bool str_to_int(  const char * sval, int *   p_ival, int base);
 bool str_to_float(const char * sval, float * p_fval);
 
diff --git a/src/util/timestamp.c b/src/util/timestamp.c
index c212f2f..47cee46 100644
--- a/src/util/timestamp.c
+++ b/src/util/timestamp.c
@@ -209,7 +209,7 @@ char *   formatted_time_t(uint64_t nanos) {
  *  \param  epoch_time
  *  \return string representation
  */
-char * formatted_epoch_time_t(long epoch_seconds) {
+char * formatted_epoch_time_t(time_t epoch_seconds) {
    static GPrivate  formatted_epoch_time_key = G_PRIVATE_INIT(g_free);
    char * buf = get_thread_fixed_buffer(&formatted_epoch_time_key, 40);
 
diff --git a/src/util/timestamp.h b/src/util/timestamp.h
index b4515c5..300dc0d 100644
--- a/src/util/timestamp.h
+++ b/src/util/timestamp.h
@@ -21,6 +21,6 @@ void     show_timestamp_history(); // For debugging
 uint64_t elapsed_time_nanosec();   // nanoseconds since start of program, first call initializes
 char *   formatted_elapsed_time_t(guint precision); // printable elapsed time
 char *   formatted_time_t(uint64_t nanos);
-char *   formatted_epoch_time_t(long epoch_seconds);
+char *   formatted_epoch_time_t(time_t epoch_seconds);
 
 #endif /* TIMESTAMP_H_ */
-- 
2.45.2

