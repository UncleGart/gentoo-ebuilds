diff -uraN a/compiler/rustc_middle/src/mir/mod.rs b/compiler/rustc_middle/src/mir/mod.rs
--- a/compiler/rustc_middle/src/mir/mod.rs	2021-07-26 10:43:01.000000000 -0400
+++ b/compiler/rustc_middle/src/mir/mod.rs	2021-09-01 01:50:26.798883994 -0400
@@ -1710,7 +1710,7 @@
     pub projection: &'tcx List<PlaceElem<'tcx>>,
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 static_assert_size!(Place<'_>, 16);
 
 #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
@@ -2036,7 +2036,7 @@
     Constant(Box<Constant<'tcx>>),
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 static_assert_size!(Operand<'_>, 24);
 
 impl<'tcx> Debug for Operand<'tcx> {
@@ -2174,7 +2174,7 @@
     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 static_assert_size!(Rvalue<'_>, 40);
 
 #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
@@ -2200,7 +2200,7 @@
     Generator(DefId, SubstsRef<'tcx>, hir::Movability),
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 static_assert_size!(AggregateKind<'_>, 48);
 
 #[derive(Copy, Clone, Debug, PartialEq, PartialOrd, Eq, TyEncodable, TyDecodable, Hash, HashStable)]
diff -uraN a/compiler/rustc_parse/src/parser/attr_wrapper.rs b/compiler/rustc_parse/src/parser/attr_wrapper.rs
--- a/compiler/rustc_parse/src/parser/attr_wrapper.rs	2021-07-26 10:43:01.000000000 -0400
+++ b/compiler/rustc_parse/src/parser/attr_wrapper.rs	2021-09-01 01:46:56.668881248 -0400
@@ -34,7 +34,7 @@
 
 // This struct is passed around very frequently,
 // so make sure it doesn't accidentally get larger
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 rustc_data_structures::static_assert_size!(AttrWrapper, 16);
 
 impl AttrWrapper {
diff -uraN a/library/alloc/src/collections/btree/node/tests.rs b/library/alloc/src/collections/btree/node/tests.rs
--- a/library/alloc/src/collections/btree/node/tests.rs	2021-07-26 10:43:01.000000000 -0400
+++ b/library/alloc/src/collections/btree/node/tests.rs	2021-09-01 01:47:05.288881361 -0400
@@ -92,7 +92,7 @@
 }
 
 #[test]
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 fn test_sizes() {
     assert_eq!(core::mem::size_of::<LeafNode<(), ()>>(), 16);
     assert_eq!(core::mem::size_of::<LeafNode<i64, i64>>(), 16 + CAPACITY * 2 * 8);
diff -uraN a/src/librustdoc/html/render/context.rs b/src/librustdoc/html/render/context.rs
--- a/src/librustdoc/html/render/context.rs	2021-07-26 10:43:02.000000000 -0400
+++ b/src/librustdoc/html/render/context.rs	2021-09-01 01:52:46.858885824 -0400
@@ -70,7 +70,7 @@
 }
 
 // `Context` is cloned a lot, so we don't want the size to grow unexpectedly.
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_size = "64"))]
 rustc_data_structures::static_assert_size!(Context<'_>, 104);
 
 /// Shared mutable state used in [`Context`] and elsewhere.
diff -uraN a/vendor/rustc-ap-rustc_parse/.cargo-checksum.json b/vendor/rustc-ap-rustc_parse/.cargo-checksum.json
--- a/vendor/rustc-ap-rustc_parse/.cargo-checksum.json	2021-07-26 11:20:39.000000000 -0400
+++ b/vendor/rustc-ap-rustc_parse/.cargo-checksum.json	2021-09-01 18:15:59.770349463 -0400
@@ -1 +1,24 @@
-{"files":{"Cargo.toml":"74e558781c234445d495df5485a5b1e2e5ef1608ac0359e6362adbd388146e58","src/lexer/mod.rs":"679cabd75dd5d94c7f14b796db66f3acdf2d2fd9a1a3e7e3c08f6b366b250d79","src/lexer/tokentrees.rs":"6933ec324a9697f1a72b9f983ec4392a00428f4c7dd7950dda8f87c80b26893d","src/lexer/unescape_error_reporting.rs":"dd6e9eed03b9f56b053512314e1080eaf2280400e0622fb64f010e041615ee64","src/lexer/unicode_chars.rs":"9562c1bded3dfc31738682e53da04ab16b70aa5f075f5b26b5edd1d106c451f0","src/lib.rs":"3163674b59e50d6ab87d334ae09ed60a3b588d0c1dd59ac3cc39698c610e9898","src/parser/attr.rs":"9a4c5885255bf5c59007faacf97f4379de07282f40e3bc3188c972db31a27820","src/parser/attr_wrapper.rs":"472154ae3bad484daa0dc80e4816c339ed6dd1493f11ad73bb93182065c787ba","src/parser/diagnostics.rs":"c93c210bace3a2877ad8f23c1785eaec6f2a87c05ee32e3379da2b2071433f00","src/parser/expr.rs":"39e927b6a16a90067c87477a9ba70d2d246c786770d06df6c8d2ca0d28ed85d5","src/parser/generics.rs":"a52b9172776ee4e97c3f9aed7175503acfc71c5868f39b8c15fec228f38baac6","src/parser/item.rs":"418753b2bd60e3417389842539f788fe0fe6c5e04722e41fc960d0bdf54b0d54","src/parser/mod.rs":"5f2d8d3edb2db38e50589986dee36da138608becb9d9888e0544463900654b4a","src/parser/nonterminal.rs":"d6ce2161500827dd7adb933429eddc2e30e35bf10ba8197dabdaca2d8ce6027c","src/parser/pat.rs":"314b3e2d977831da6b791fdb2daa1a04e5c8a7a4196adab61f1a023fbde967cf","src/parser/path.rs":"84ae4c221a2981fd3c348e7eac0dfef42abbebb051d1ade2e2f03c620e82cfea","src/parser/stmt.rs":"c423597c71180b1e025ff9dbeb84d88fee5135bc6ad0be7bef63055844711f36","src/parser/ty.rs":"c156668267d162f6c08b7c89571fa345b189ce535d4848dd06b377db02e4a9b2","src/validate_attr.rs":"468fdc963e788bd43f3fe0eff59c169711922429a5672a896986638e5a8d1d47"},"package":"02502d8522ba31d0bcad28a78822b68c1b6ba947a2b4aa6a2341b30594379b80"}
\ No newline at end of file
+{
+    "files": {
+        "Cargo.toml": "74e558781c234445d495df5485a5b1e2e5ef1608ac0359e6362adbd388146e58",
+        "src/lexer/mod.rs": "679cabd75dd5d94c7f14b796db66f3acdf2d2fd9a1a3e7e3c08f6b366b250d79",
+        "src/lexer/tokentrees.rs": "6933ec324a9697f1a72b9f983ec4392a00428f4c7dd7950dda8f87c80b26893d",
+        "src/lexer/unescape_error_reporting.rs": "dd6e9eed03b9f56b053512314e1080eaf2280400e0622fb64f010e041615ee64",
+        "src/lexer/unicode_chars.rs": "9562c1bded3dfc31738682e53da04ab16b70aa5f075f5b26b5edd1d106c451f0",
+        "src/lib.rs": "3163674b59e50d6ab87d334ae09ed60a3b588d0c1dd59ac3cc39698c610e9898",
+        "src/parser/attr.rs": "9a4c5885255bf5c59007faacf97f4379de07282f40e3bc3188c972db31a27820",
+        "src/parser/attr_wrapper.rs": "3d19e6a5fdd50f0502db07b5f41488dfb8df101ebc63486205c24a71b414a6e3",
+        "src/parser/diagnostics.rs": "c93c210bace3a2877ad8f23c1785eaec6f2a87c05ee32e3379da2b2071433f00",
+        "src/parser/expr.rs": "39e927b6a16a90067c87477a9ba70d2d246c786770d06df6c8d2ca0d28ed85d5",
+        "src/parser/generics.rs": "a52b9172776ee4e97c3f9aed7175503acfc71c5868f39b8c15fec228f38baac6",
+        "src/parser/item.rs": "418753b2bd60e3417389842539f788fe0fe6c5e04722e41fc960d0bdf54b0d54",
+        "src/parser/mod.rs": "5f2d8d3edb2db38e50589986dee36da138608becb9d9888e0544463900654b4a",
+        "src/parser/nonterminal.rs": "d6ce2161500827dd7adb933429eddc2e30e35bf10ba8197dabdaca2d8ce6027c",
+        "src/parser/pat.rs": "314b3e2d977831da6b791fdb2daa1a04e5c8a7a4196adab61f1a023fbde967cf",
+        "src/parser/path.rs": "84ae4c221a2981fd3c348e7eac0dfef42abbebb051d1ade2e2f03c620e82cfea",
+        "src/parser/stmt.rs": "c423597c71180b1e025ff9dbeb84d88fee5135bc6ad0be7bef63055844711f36",
+        "src/parser/ty.rs": "c156668267d162f6c08b7c89571fa345b189ce535d4848dd06b377db02e4a9b2",
+        "src/validate_attr.rs": "468fdc963e788bd43f3fe0eff59c169711922429a5672a896986638e5a8d1d47"
+    },
+    "package": "02502d8522ba31d0bcad28a78822b68c1b6ba947a2b4aa6a2341b30594379b80"
+}
\ No newline at end of file
diff -uraN a/vendor/rustc-ap-rustc_parse/src/parser/attr_wrapper.rs b/vendor/rustc-ap-rustc_parse/src/parser/attr_wrapper.rs
--- a/vendor/rustc-ap-rustc_parse/src/parser/attr_wrapper.rs	2021-07-26 11:20:39.000000000 -0400
+++ b/vendor/rustc-ap-rustc_parse/src/parser/attr_wrapper.rs	2021-09-01 17:51:25.210330197 -0400
@@ -34,7 +34,7 @@
 
 // This struct is passed around very frequently,
 // so make sure it doesn't accidentally get larger
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 rustc_data_structures::static_assert_size!(AttrWrapper, 16);
 
 impl AttrWrapper {
