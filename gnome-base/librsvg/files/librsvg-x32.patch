diff -uraN a/Cargo.lock b/Cargo.lock
--- a/Cargo.lock	2021-02-03 11:50:22.000000000 -0500
+++ b/Cargo.lock	2021-04-22 04:32:59.186430751 -0400
@@ -1918,8 +1918,6 @@
 [[package]]
 name = "thin-slice"
 version = "0.1.1"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "8eaa81235c7058867fa8c0e7314f33dcce9c215f535d1913822a2b3f5e289f3c"
 
 [[package]]
 name = "thread_local"
diff -uraN a/Cargo.toml b/Cargo.toml
--- a/Cargo.toml	2021-02-03 11:50:22.000000000 -0500
+++ b/Cargo.toml	2021-04-22 04:30:27.771912531 -0400
@@ -50,6 +50,9 @@
 url = "2"
 xml5ever = "0.16.1"
 
+[patch.crates-io]
+thin-slice = { path = "./vendor/thin-slice" }
+
 [dev-dependencies]
 assert_cmd = "1.0.1"
 cairo-rs = { version = "0.8.0", features = ["png"] }
diff -uraN a/Makefile.am b/Makefile.am
--- a/Makefile.am	2021-02-03 11:50:22.000000000 -0500
+++ b/Makefile.am	2021-04-22 13:58:44.487807538 -0400
@@ -160,7 +160,7 @@
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)		\
 	LIBRSVG_BUILD_DIR=$(LIBRSVG_BUILD_DIR)		\
 	OUT_DIR=$(LIBRSVG_BUILD_DIR)/tests/output	\
-	$(CARGO) --locked test $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) -- --include-ignored -Z unstable-options
+	$(CARGO) test $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) -- --include-ignored -Z unstable-options
 
 clean-local:
 	cd $(top_srcdir) &&			\
@@ -185,7 +185,7 @@
 	PKG_CONFIG_ALLOW_CROSS=1						\
 	PKG_CONFIG='$(PKG_CONFIG)'						\
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)					\
-	$(CARGO) --locked build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --lib \
+	$(CARGO) build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --lib \
 	&& cd $(LIBRSVG_BUILD_DIR) && $(LINK) $< && mv $(RUST_LIB) .libs/librsvg_c_api.a
 
 librsvg_@RSVG_API_MAJOR_VERSION@_la_CPPFLAGS = $(AM_CPPFLAGS)
@@ -227,7 +227,7 @@
 	PKG_CONFIG_ALLOW_CROSS=1						\
 	PKG_CONFIG='$(PKG_CONFIG)'						\
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)					\
-	$(CARGO) --locked build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --bin rsvg-convert
+	$(CARGO) build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --bin rsvg-convert
 
 rsvg-convert$(EXEEXT): $(RSVG_CONVERT_BIN)
 	cd $(LIBRSVG_BUILD_DIR) && mv $(RSVG_CONVERT_BIN) rsvg-convert
diff -uraN a/Makefile.in b/Makefile.in
--- a/Makefile.in	2021-02-03 13:59:05.000000000 -0500
+++ b/Makefile.in	2021-04-22 13:59:22.958915910 -0400
@@ -1567,7 +1567,7 @@
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)		\
 	LIBRSVG_BUILD_DIR=$(LIBRSVG_BUILD_DIR)		\
 	OUT_DIR=$(LIBRSVG_BUILD_DIR)/tests/output	\
-	$(CARGO) --locked test $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) -- --include-ignored -Z unstable-options
+	$(CARGO) test $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) -- --include-ignored -Z unstable-options
 
 clean-local:
 	cd $(top_srcdir) &&			\
@@ -1592,7 +1592,7 @@
 	PKG_CONFIG_ALLOW_CROSS=1						\
 	PKG_CONFIG='$(PKG_CONFIG)'						\
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)					\
-	$(CARGO) --locked build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --lib \
+	$(CARGO) build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --lib \
 	&& cd $(LIBRSVG_BUILD_DIR) && $(LINK) $< && mv $(RUST_LIB) .libs/librsvg_c_api.a
 
 $(RSVG_CONVERT_BIN): $(RSVG_CONVERT_SRC)
@@ -1600,7 +1600,7 @@
 	PKG_CONFIG_ALLOW_CROSS=1						\
 	PKG_CONFIG='$(PKG_CONFIG)'						\
 	CARGO_TARGET_DIR=$(CARGO_TARGET_DIR)					\
-	$(CARGO) --locked build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --bin rsvg-convert
+	$(CARGO) build $(CARGO_VERBOSE) $(CARGO_TARGET_ARGS) $(CARGO_RELEASE_ARGS) --bin rsvg-convert
 
 rsvg-convert$(EXEEXT): $(RSVG_CONVERT_BIN)
 	cd $(LIBRSVG_BUILD_DIR) && mv $(RSVG_CONVERT_BIN) rsvg-convert
diff -uraN a/vendor/thin-slice/src/lib.rs b/vendor/thin-slice/src/lib.rs
--- a/vendor/thin-slice/src/lib.rs	2021-04-22 04:43:32.105324523 -0400
+++ b/vendor/thin-slice/src/lib.rs	2021-04-22 05:37:23.834000000 -0400
@@ -29,14 +29,14 @@
 use std::cmp::Ordering;
 use std::fmt;
 use std::hash::{Hash, Hasher};
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 use std::marker::PhantomData;
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 use std::mem;
 use std::ops::{Deref, DerefMut};
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 use std::ptr::NonNull;
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 use std::slice;
 
 /// An owned slice that tries to use only one word of storage.
@@ -56,38 +56,38 @@
     ///
     /// If len >= 0xffff, then the top 16 bits of data will be 0xffff, and
     /// the lower 48 bits will be a pointer to a heap allocated `Box<[T]>`.
-    #[cfg(target_arch = "x86_64")]
+    #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     data: NonNull<()>,
 
-    #[cfg(not(target_arch = "x86_64"))]
+    #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "64")))]
     data: Box<[T]>,
 
-    #[cfg(target_arch = "x86_64")]
+    #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     _phantom: PhantomData<Box<[T]>>,
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 const TAG_MASK: usize = 0xffff000000000000;
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 const PTR_MASK: usize = 0x0000ffffffffffff;
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 const PTR_HIGH: usize = 0x0000800000000000;
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 const TAG_SHIFT: usize = 48;
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 const TAG_LIMIT: usize = TAG_MASK >> TAG_SHIFT;
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 enum Storage<T> {
     Inline(*mut T, usize),
     Spilled(*mut Box<[T]>),
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 impl<T> ThinBoxedSlice<T> {
     /// Constructs a `ThinBoxedSlice` from a raw pointer.
     ///
@@ -203,7 +203,7 @@
     }
 }
 
-#[cfg(not(target_arch = "x86_64"))]
+#[cfg(not(all(target_arch = "x86_64", target_pointer_width = "64")))]
 impl<T> ThinBoxedSlice<T> {
     /// Constructs a `ThinBoxedSlice` from a raw pointer.
     ///
@@ -284,7 +284,7 @@
     }
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 impl<T> Storage<T> {
     #[inline]
     fn from_data(data: NonNull<()>) -> Storage<T> {
@@ -343,7 +343,7 @@
 unsafe impl<T: Send> Send for ThinBoxedSlice<T> {}
 unsafe impl<T: Sync> Sync for ThinBoxedSlice<T> {}
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 impl<T> Drop for ThinBoxedSlice<T> {
     fn drop(&mut self) {
         let _ = Into::<Box<[T]>>::into(
@@ -356,7 +356,7 @@
 }
 
 impl<T: Clone> Clone for ThinBoxedSlice<T> {
-    #[cfg(target_arch = "x86_64")]
+    #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     fn clone(&self) -> Self {
         unsafe {
             match self.storage() {
@@ -373,7 +373,7 @@
         }
     }
 
-    #[cfg(not(target_arch = "x86_64"))]
+    #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "64")))]
     fn clone(&self) -> Self {
         ThinBoxedSlice {
             data: self.data.clone(),
@@ -396,7 +396,7 @@
 impl<T> Deref for ThinBoxedSlice<T> {
     type Target = [T];
 
-    #[cfg(target_arch = "x86_64")]
+    #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     fn deref(&self) -> &[T] {
         unsafe {
             match self.storage() {
@@ -410,14 +410,14 @@
         }
     }
 
-    #[cfg(not(target_arch = "x86_64"))]
+    #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "64")))]
     fn deref(&self) -> &[T] {
         &*self.data
     }
 }
 
 impl<T> DerefMut for ThinBoxedSlice<T> {
-    #[cfg(target_arch = "x86_64")]
+    #[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
     fn deref_mut(&mut self) -> &mut [T] {
         unsafe {
             match self.storage() {
@@ -431,7 +431,7 @@
         }
     }
 
-    #[cfg(not(target_arch = "x86_64"))]
+    #[cfg(not(all(target_arch = "x86_64", target_pointer_width = "64")))]
     fn deref_mut(&mut self) -> &mut [T] {
         &mut *self.data
     }
@@ -498,7 +498,7 @@
     }
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 #[test]
 fn test_spilled_storage() {
     let x = ThinBoxedSlice::from(vec![0; TAG_LIMIT - 1].into_boxed_slice());
@@ -508,7 +508,7 @@
     assert!(x.spilled_storage().is_some());
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 #[test]
 fn test_from_raw_large() {
     let mut vec = vec![0; TAG_LIMIT];
@@ -519,7 +519,7 @@
     assert_eq!(x[123], 456);
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 #[test]
 fn test_into_raw_large() {
     let mut vec = vec![0; TAG_LIMIT];
@@ -531,7 +531,7 @@
     assert_eq!(y[123], 456);
 }
 
-#[cfg(target_arch = "x86_64")]
+#[cfg(all(target_arch = "x86_64", target_pointer_width = "64"))]
 #[test]
 fn test_leak_large() {
     let mut vec = vec![0; TAG_LIMIT];
